heat_template_version: 2016-10-14
description: 'OpenStack cinder storage configured by Puppet'
parameters:
  BlockStorageImage:
    default: overcloud-full
    type: string
    constraints:
      - custom_constraint: glance.image
  ExtraConfig:
    default: {}
    description: |
      Additional hiera configuration to inject into the cluster. Note
      that BlockStorageExtraConfig takes precedence over ExtraConfig.
    type: json
  BlockStorageExtraConfig:
    default: {}
    description: |
      Role specific additional hiera configuration to inject into the cluster.
    type: json
  BlockStorageIPs:
    default: {}
    type: json
  OvercloudBlockStorageFlavor:
    description: Flavor for block storage nodes to request when deploying.
    type: string
    default: baremetal
    constraints:
      - custom_constraint: nova.flavor
  KeyName:
    default: default
    description: Name of an existing Nova key pair to enable SSH access to the instances
    type: string
  UpdateIdentifier:
    default: ''
    type: string
    description: >
      Setting to a previously unused value during stack-update will trigger
      package update on all nodes
  Hostname:
    type: string
    default: '' # Defaults to Heat created hostname
  HostnameMap:
    type: json
    default: {}
    description: Optional mapping to override hostnames
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  NetworkDeploymentActions:
    type: comma_delimited_list
    description: >
      Heat action when to apply network configuration changes
    default: ['CREATE']
  SoftwareConfigTransport:
    default: POLL_SERVER_CFN
    description: |
      How the server should receive the metadata required for software configuration.
    type: string
    constraints:
    - allowed_values: [POLL_SERVER_CFN, POLL_SERVER_HEAT, POLL_TEMP_URL, ZAQAR_MESSAGE]
  CloudDomain:
    default: 'localdomain'
    type: string
    description: >
      The DNS domain used for the hosts. This should match the dhcp_domain
      configured in the Undercloud neutron. Defaults to localdomain.
  ServerMetadata:
    default: {}
    description: >
      Extra properties or metadata passed to Nova for the created nodes in
      the overcloud. It's accessible via the Nova metadata API.
    type: json
  BlockStorageSchedulerHints:
    type: json
    description: Optional scheduler hints to pass to nova
    default: {}
  NodeIndex:
    type: number
    default: 0
  ServiceConfigSettings:
    type: json
    default: {}
  ServiceNames:
    type: comma_delimited_list
    default: []
  MonitoringSubscriptions:
    type: comma_delimited_list
    default: []
  ConfigCommand:
    type: string
    description: Command which will be run whenever configuration data changes
    default: os-refresh-config --timeout 14400

resources:
  BlockStorage:
    type: OS::TripleO::Server
    metadata:
      os-collect-config:
        command: {get_param: ConfigCommand}
    properties:
      image:
        {get_param: BlockStorageImage}
      flavor: {get_param: OvercloudBlockStorageFlavor}
      key_name: {get_param: KeyName}
      networks:
        - network: ctlplane
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: UserData}
      name:
        str_replace:
            template: {get_param: Hostname}
            params: {get_param: HostnameMap}
      software_config_transport: {get_param: SoftwareConfigTransport}
      metadata: {get_param: ServerMetadata}
      scheduler_hints: {get_param: BlockStorageSchedulerHints}

  # Combine the NodeAdminUserData and NodeUserData mime archives
  UserData:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: NodeAdminUserData}
        type: multipart
      - config: {get_resource: NodeUserData}
        type: multipart

  # Creates the "heat-admin" user if configured via the environment
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NodeAdminUserData:
    type: OS::TripleO::NodeAdminUserData

  # For optional operator additional userdata
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NodeUserData:
    type: OS::TripleO::NodeUserData

  ExternalPort:
    type: OS::TripleO::BlockStorage::Ports::ExternalPort
    properties:
      ControlPlaneIP: {get_attr: [BlockStorage, networks, ctlplane, 0]}
      IPPool: {get_param: BlockStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  InternalApiPort:
    type: OS::TripleO::BlockStorage::Ports::InternalApiPort
    properties:
      ControlPlaneIP: {get_attr: [BlockStorage, networks, ctlplane, 0]}
      IPPool: {get_param: BlockStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  StoragePort:
    type: OS::TripleO::BlockStorage::Ports::StoragePort
    properties:
      ControlPlaneIP: {get_attr: [BlockStorage, networks, ctlplane, 0]}
      IPPool: {get_param: BlockStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  StorageMgmtPort:
    type: OS::TripleO::BlockStorage::Ports::StorageMgmtPort
    properties:
      ControlPlaneIP: {get_attr: [BlockStorage, networks, ctlplane, 0]}
      IPPool: {get_param: BlockStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  TenantPort:
    type: OS::TripleO::BlockStorage::Ports::TenantPort
    properties:
      ControlPlaneIP: {get_attr: [BlockStorage, networks, ctlplane, 0]}
      IPPool: {get_param: BlockStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  ManagementPort:
    type: OS::TripleO::BlockStorage::Ports::ManagementPort
    properties:
      ControlPlaneIP: {get_attr: [BlockStorage, networks, ctlplane, 0]}
      IPPool: {get_param: BlockStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  NetworkConfig:
    type: OS::TripleO::BlockStorage::Net::SoftwareConfig
    properties:
      ControlPlaneIp: {get_attr: [BlockStorage, networks, ctlplane, 0]}
      ExternalIpSubnet: {get_attr: [ExternalPort, ip_subnet]}
      InternalApiIpSubnet: {get_attr: [InternalApiPort, ip_subnet]}
      StorageIpSubnet: {get_attr: [StoragePort, ip_subnet]}
      StorageMgmtIpSubnet: {get_attr: [StorageMgmtPort, ip_subnet]}
      TenantIpSubnet: {get_attr: [TenantPort, ip_subnet]}
      ManagementIpSubnet: {get_attr: [ManagementPort, ip_subnet]}

  NetIpMap:
    type: OS::TripleO::Network::Ports::NetIpMap
    properties:
      ControlPlaneIp: {get_attr: [BlockStorage, networks, ctlplane, 0]}
      ExternalIp: {get_attr: [ExternalPort, ip_address]}
      ExternalIpSubnet: {get_attr: [ExternalPort, ip_subnet]}
      ExternalIpUri: {get_attr: [ExternalPort, ip_address_uri]}
      InternalApiIp: {get_attr: [InternalApiPort, ip_address]}
      InternalApiIpSubnet: {get_attr: [InternalApiPort, ip_subnet]}
      InternalApiIpUri: {get_attr: [InternalApiPort, ip_address_uri]}
      StorageIp: {get_attr: [StoragePort, ip_address]}
      StorageIpSubnet: {get_attr: [StoragePort, ip_subnet]}
      StorageIpUri: {get_attr: [StoragePort, ip_address_uri]}
      StorageMgmtIp: {get_attr: [StorageMgmtPort, ip_address]}
      StorageMgmtIpSubnet: {get_attr: [StorageMgmtPort, ip_subnet]}
      StorageMgmtIpUri: {get_attr: [StorageMgmtPort, ip_address_uri]}
      TenantIp: {get_attr: [TenantPort, ip_address]}
      TenantIpSubnet: {get_attr: [TenantPort, ip_subnet]}
      TenantIpUri: {get_attr: [TenantPort, ip_address_uri]}
      ManagementIp: {get_attr: [ManagementPort, ip_address]}
      ManagementIpSubnet: {get_attr: [ManagementPort, ip_subnet]}
      ManagementIpUri: {get_attr: [ManagementPort, ip_address_uri]}

  NetworkDeployment:
    type: OS::TripleO::SoftwareDeployment
    properties:
      name: NetworkDeployment
      config: {get_resource: NetworkConfig}
      server: {get_resource: BlockStorage}
      actions: {get_param: NetworkDeploymentActions}

  BlockStorageDeployment:
    type: OS::Heat::StructuredDeployment
    depends_on: NetworkDeployment
    properties:
      name: BlockStorageDeployment
      server: {get_resource: BlockStorage}
      config: {get_resource: BlockStorageConfig}
      input_values:
        enable_package_upgrade: {get_attr: [UpdateDeployment, update_managed_packages]}

  # Map heat metadata into hiera datafiles
  BlockStorageConfig:
    type: OS::Heat::StructuredConfig
    properties:
      group: os-apply-config
      config:
        hiera:
          hierarchy:
            - '"%{::uuid}"'
            - heat_config_%{::deploy_config_name}
            - volume_extraconfig
            - extraconfig
            - service_names
            - service_configs
            - volume
            - bootstrap_node # provided by allNodesConfig
            - all_nodes # provided by allNodesConfig
            - vip_data # provided by allNodesConfig
            - '"%{::osfamily}"'
          merge_behavior: deeper
          datafiles:
            service_names:
              mapped_data:
                service_names: {get_param: ServiceNames}
                sensu::subscriptions: {get_param: MonitoringSubscriptions}
            service_configs:
              mapped_data:
                map_replace:
                  - {get_param: ServiceConfigSettings}
                  - values: {get_attr: [NetIpMap, net_ip_map]}
            volume_extraconfig:
              mapped_data: {get_param: BlockStorageExtraConfig}
            extraconfig:
              mapped_data: {get_param: ExtraConfig}
            volume:
              mapped_data:
                tripleo::packages::enable_upgrade: {get_input: enable_package_upgrade}

  # Resource for site-specific injection of root certificate
  NodeTLSCAData:
    depends_on: BlockStorageDeployment
    type: OS::TripleO::NodeTLSCAData
    properties:
      server: {get_resource: BlockStorage}

  # Hook for site-specific additional pre-deployment config,
  # applying to all nodes, e.g node registration/unregistration
  NodeExtraConfig:
    depends_on: NodeTLSCAData
    type: OS::TripleO::NodeExtraConfig
    properties:
        server: {get_resource: BlockStorage}

  UpdateConfig:
    type: OS::TripleO::Tasks::PackageUpdate

  UpdateDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      name: UpdateDeployment
      config: {get_resource: UpdateConfig}
      server: {get_resource: BlockStorage}
      input_values:
        update_identifier:
          get_param: UpdateIdentifier

outputs:
  ip_address:
    description: IP address of the server in the ctlplane network
    value: {get_attr: [BlockStorage, networks, ctlplane, 0]}
  hostname:
    description: Hostname of the server
    value: {get_attr: [BlockStorage, name]}
  hostname_map:
    description: Mapping of network names to hostnames
    value:
      external:
        list_join:
        - '.'
        - - {get_attr: [BlockStorage, name]}
          - external
          - {get_param: CloudDomain}
      internal_api:
        list_join:
        - '.'
        - - {get_attr: [BlockStorage, name]}
          - internalapi
          - {get_param: CloudDomain}
      storage:
        list_join:
        - '.'
        - - {get_attr: [BlockStorage, name]}
          - storage
          - {get_param: CloudDomain}
      storage_mgmt:
        list_join:
        - '.'
        - - {get_attr: [BlockStorage, name]}
          - storagemgmt
          - {get_param: CloudDomain}
      tenant:
        list_join:
        - '.'
        - - {get_attr: [BlockStorage, name]}
          - tenant
          - {get_param: CloudDomain}
      management:
        list_join:
        - '.'
        - - {get_attr: [BlockStorage, name]}
          - management
          - {get_param: CloudDomain}
      ctlplane:
        list_join:
        - '.'
        - - {get_attr: [BlockStorage, name]}
          - ctlplane
          - {get_param: CloudDomain}
  hosts_entry:
    value:
      str_replace:
        template: |
          PRIMARYIP PRIMARYHOST.DOMAIN PRIMARYHOST
          EXTERNALIP EXTERNALHOST.DOMAIN EXTERNALHOST
          INTERNAL_APIIP INTERNAL_APIHOST.DOMAIN INTERNAL_APIHOST
          STORAGEIP STORAGEHOST.DOMAIN STORAGEHOST
          STORAGE_MGMTIP STORAGE_MGMTHOST.DOMAIN STORAGE_MGMTHOST
          TENANTIP TENANTHOST.DOMAIN TENANTHOST
          MANAGEMENTIP MANAGEMENTHOST.DOMAIN MANAGEMENTHOST
          CTLPLANEIP CTLPLANEHOST.DOMAIN CTLPLANEHOST
        params:
          PRIMARYIP: {get_attr: [NetIpMap, net_ip_map, {get_param: [ServiceNetMap, BlockStorageHostnameResolveNetwork]}]}
          DOMAIN: {get_param: CloudDomain}
          PRIMARYHOST: {get_attr: [BlockStorage, name]}
          EXTERNALIP: {get_attr: [ExternalPort, ip_address]}
          EXTERNALHOST:
            list_join:
            - '.'
            - - {get_attr: [BlockStorage, name]}
              - external
          INTERNAL_APIIP: {get_attr: [InternalApiPort, ip_address]}
          INTERNAL_APIHOST:
            list_join:
            - '.'
            - - {get_attr: [BlockStorage, name]}
              - internalapi
          STORAGEIP: {get_attr: [StoragePort, ip_address]}
          STORAGEHOST:
            list_join:
            - '.'
            - - {get_attr: [BlockStorage, name]}
              - storage
          STORAGE_MGMTIP: {get_attr: [StorageMgmtPort, ip_address]}
          STORAGE_MGMTHOST:
            list_join:
            - '.'
            - - {get_attr: [BlockStorage, name]}
              - storagemgmt
          TENANTIP: {get_attr: [TenantPort, ip_address]}
          TENANTHOST:
            list_join:
            - '.'
            - - {get_attr: [BlockStorage, name]}
              - tenant
          MANAGEMENTIP: {get_attr: [ManagementPort, ip_address]}
          MANAGEMENTHOST:
            list_join:
            - '.'
            - - {get_attr: [BlockStorage, name]}
              - management
          CTLPLANEIP: {get_attr: [BlockStorage, networks, ctlplane, 0]}
          CTLPLANEHOST:
            list_join:
            - '.'
            - - {get_attr: [BlockStorage, name]}
              - ctlplane
  nova_server_resource:
    description: Heat resource handle for the block storage server
    value:
      {get_resource: BlockStorage}
  external_ip_address:
    description: IP address of the server in the external network
    value: {get_attr: [ExternalPort, ip_address]}
  internal_api_ip_address:
    description: IP address of the server in the internal_api network
    value: {get_attr: [InternalApiPort, ip_address]}
  storage_ip_address:
    description: IP address of the server in the storage network
    value: {get_attr: [StoragePort, ip_address]}
  storage_mgmt_ip_address:
    description: IP address of the server in the storage_mgmt network
    value: {get_attr: [StorageMgmtPort, ip_address]}
  tenant_ip_address:
    description: IP address of the server in the tenant network
    value: {get_attr: [TenantPort, ip_address]}
  management_ip_address:
    description: IP address of the server in the management network
    value: {get_attr: [ManagementPort, ip_address]}
